// Automatically generated by gendao.
// Source: valencia_media/{{.Table.Name}}

// ********************
// *** DO NOT EDIT! ***
// ********************

package model

import (
	"math/rand"
	"sync/atomic"{{range .Table.UsePackages}}{{range .}}
	{{.}}{{end}}
	{{end}}
)
{{$TableNamePascal := .Table.NameByPascalcase}}
{{$TableNameCamel := .Table.NameByCamelcase}}
{{$CommonColumns := .Config.CommonColumns}}
// {{print $TableNamePascal " " $TableNameCamel}} model
// +gen slice:"GroupBy[string],Select[string],SortBy,Where"
type {{$TableNamePascal}} struct { {{range .Table.Columns}}{{if contains $CommonColumns .Name}}{{else}}
  {{print .NameByPascalcase " " .Type "`db:\"" .Name "\"`"}}{{end}}{{end}}
  Model
}
{{$counter := print $TableNameCamel "Counter"}}
var {{$counter}} uint64
{{$privateDummyMethod := print "newDummy" $TableNamePascal}}
// NewDummy{{$TableNamePascal}} is generate new dummy {{$TableNameCamel}}
func NewDummy{{print $TableNamePascal "() " $TableNamePascal}} {
	counter := atomic.AddUint64(&{{$counter}}, 1)
	return {{$privateDummyMethod}}(counter, true)
}
{{if .Table.PrimaryKey.AutoIncrement}}
// NewDummy{{$TableNamePascal}}WithoutPK is generate new dummy {{$TableNameCamel}} without PK
func NewDummy{{$TableNamePascal}}WithoutPK() {{$TableNamePascal}} {
	counter := atomic.AddUint64(&{{$counter}}, 1)
	return {{$privateDummyMethod}}(counter, false)
}{{end}}

func {{$privateDummyMethod}}(counter uint64, fillsPK bool) {{$TableNamePascal}} {
	rand.Seed(time.Now().UnixNano())
	m := {{$TableNamePascal}}{ {{range .Table.Columns}}{{if .Primary}}
		{{print .NameByPascalcase ": "}} {{if eq .Type "string"}}""{{else}}0{{end}},{{else}}{{if not .Common}}
		{{print .NameByPascalcase ": " .SampleValue ","}}{{end}}{{end}}{{end}}
	}
	if fillsPK { {{range .Table.PrimaryKey.Columns}}{{if eq .Type "string"}}
		m.{{.NameByPascalcase}} = fmt.Sprintf("%s%d", randString(10), counter){{else}}
		m.{{.NameByPascalcase}} = {{.Type}}(counter){{end}}{{end}}
	}
	return m
}

// TableName is get table name
func (m {{$TableNamePascal}}) TableName() string {
	return "{{.Table.Name}}"
}

// PrimaryKeys is get primary keys for table
func (m {{$TableNamePascal}}) PrimaryKeys() []string {
	return []string{ {{range $i, $c := .Table.PrimaryKey.Columns}}{{if ne $i 0}}, {{end}}"{{.Name}}"{{end}} }
}

// ColumnNames is get columns for table
func (m {{$TableNamePascal}}) ColumnNames() []string {
	return []string{ {{range $i, $c := .Table.Columns}}{{if ne $i 0}}, {{end}}"{{$c.Name}}"{{end}} }
}
